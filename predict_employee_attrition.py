# -*- coding: utf-8 -*-
"""Predict Employee Attrition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14wGrsQBXIlGBw3rKUGAyQ9LvHyG8Z5Zv
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import shap

df = pd.read_csv('dataset.csv')

# Encode categorical variables
label_encoders = {}
for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Perform EDA
plt.figure(figsize=(10, 5))
sns.countplot(x='Attrition', data=df)
plt.title("Employee Attrition Count")
plt.show()

# Correlation heatmap
plt.figure(figsize=(15, 9))
sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()

# Feature selection
X = df.drop(columns=['Attrition'])  # Target variable
y = df['Attrition']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardization
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Random Forest Model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Model Evaluation
print("Random Forest Classifier Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))

# Train Logistic Regression Model
log_reg = LogisticRegression(max_iter=1000, random_state=42)
log_reg.fit(X_train, y_train)
y_pred_lr = log_reg.predict(X_test)

# Model Evaluation
print("Logistic Regression Accuracy:", accuracy_score(y_test, y_pred_lr))
print(classification_report(y_test, y_pred_lr))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_lr))

# SHAP summary plot
shap.summary_plot(shap_values, X_test, feature_names=df.drop(columns=['Attrition']).columns)

# Actionable Insights for HR
feature_importances = pd.Series(rf_model.feature_importances_, index=df.drop(columns=['Attrition']).columns)
top_features = feature_importances.sort_values(ascending=False).head(10)

print("\nTop Factors Influencing Attrition:")
print(top_features)

# HR Recommendations based on insights
print("\nRetention Strategies:")
print("- Focus on high-risk employees based on top factors (e.g., Work-Life Balance, Job Satisfaction).")
print("- Improve employee benefits and engagement programs.")
print("- Address workload concerns and offer career development opportunities.")

